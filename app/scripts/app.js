// Generated by CoffeeScript 1.7.1
'use strict';
var app;

app = angular.module('emmFrontendApp', ['ngCookies', 'ngResource', 'ngSanitize', 'ngRoute']);


/*
 * $routProvider: 用于配置route路由
 * $locationProvider: 用于配置angularJS中的deep link路径的存储格式。 包含hashPrefix和html5Mode属性
 * $$httpProvider: 用于进行$http的配置
 */

app.config(function($routeProvider, $locationProvider, $httpProvider) {
  $routeProvider.when('/', {
    templateUrl: 'partials/main',
    controller: 'MainCtrl'
  }).when('/login', {
    templateUrl: 'partials/login',
    controller: 'LoginCtrl'
  }).when('/signup', {
    templateUrl: 'partials/signup',
    controller: 'SignupCtrl'
  }).when('/settings', {
    templateUrl: 'partials/settings',
    controller: 'SettingsCtrl',
    authenticate: true
  }).otherwise({
    redirectTo: '/'
  });
  $locationProvider.html5Mode(true);

  /*
   * 当server端返回401错误的时候重定向到/login登陆页面
   */
  return $httpProvider.interceptors.push([
    '$q', '$location', function($q, $location) {
      return {
        responseError: function(response) {
          if (response.status === 401) {
            $location.path('/login');
          }
          return $q.reject(response);
        }
      };
    }
  ]);
});

app.run(function($rootScope, $location, Auth) {

  /*
   * 监听route地址的变化，如果route地址需要权限验证，而又未登录，则跳转至login登陆页面
   */
  return $rootScope.$on('$routeChangeStart', function(event, next) {
    if (next.authenticate && !Auth.isLoggedIn()) {
      return $location.path('/login');
    }
  });
});


/*
 * KISSY初始化
 */

KISSY.ready(function(S) {
  console.log('Kissy Initialization');
  return KISSY.config('combine', false);
});


/*
 * 上传文件插件示例
 */

KISSY.use("gallery/uploader/1.5/index,\ngallery/uploader/1.5/themes/default/index,\ngallery/uploader/1.5/themes/default/style.css", function(S, Uploader, DefaultTheme) {
  return KISSY.use("gallery/uploader/1.5/plugins/auth/auth,\ngallery/uploader/1.5/plugins/urlsInput/urlsInput,\ngallery/uploader/1.5/plugins/proBars/proBars  ", function(S, Auth, UrlsInput, ProBars) {
    var uploader;
    uploader = new Uploader('#J_UploaderBtn', {
      action: '/file/upload'
    });
    uploader.theme(new DefaultTheme({
      queueTarget: '#J_UploaderQueue'
    }));
    return uploader.plug(new Auth({
      max: 3,
      maxSize: 100
    })).plug(new UrlsInput({
      target: '#J_Urls'
    })).plug(new ProBars());
  });
});
